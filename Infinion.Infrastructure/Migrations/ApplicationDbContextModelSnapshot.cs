// <auto-generated />
using System;
using Infinion.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infinion.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infinion.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Infinion.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(8989),
                            Description = "High performance laptop.",
                            ImageUrl = "https://example.com/images/laptop.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(8992),
                            Name = "Laptop",
                            Price = 150000.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9004),
                            Description = "Latest model smartphone.",
                            ImageUrl = "https://example.com/images/smartphone.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9005),
                            Name = "Smartphone",
                            Price = 80000.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 3,
                            Category = "Furniture",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9015),
                            Description = "Comfortable ergonomic office chair.",
                            ImageUrl = "https://example.com/images/office-chair.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9016),
                            Name = "Office Chair",
                            Price = 20000.00m,
                            Stock = 200
                        },
                        new
                        {
                            Id = 4,
                            Category = "Home Decor",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9023),
                            Description = "Stylish desk lamp with adjustable brightness.",
                            ImageUrl = "https://example.com/images/desk-lamp.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9024),
                            Name = "Desk Lamp",
                            Price = 5000.00m,
                            Stock = 300
                        },
                        new
                        {
                            Id = 5,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9031),
                            Description = "Noise-cancelling over-ear headphones.",
                            ImageUrl = "https://example.com/images/bluetooth-headphones.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9032),
                            Name = "Bluetooth Headphones",
                            Price = 25000.00m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 6,
                            Category = "Home Appliances",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9039),
                            Description = "Automatic coffee maker with programmable settings.",
                            ImageUrl = "https://example.com/images/coffee-maker.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9039),
                            Name = "Coffee Maker",
                            Price = 25000.00m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 7,
                            Category = "Musical Instruments",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9046),
                            Description = "Electric guitar with solid body and maple neck.",
                            ImageUrl = "https://example.com/images/electric-guitar.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9047),
                            Name = "Electric Guitar",
                            Price = 45000.00m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 8,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9054),
                            Description = "Smart watch with health and fitness tracking features.",
                            ImageUrl = "https://example.com/images/smart-watch.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9055),
                            Name = "Smart Watch",
                            Price = 30000.00m,
                            Stock = 120
                        },
                        new
                        {
                            Id = 9,
                            Category = "Kitchen Appliances",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9062),
                            Description = "High-speed blender with multiple settings.",
                            ImageUrl = "https://example.com/images/blender.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9062),
                            Name = "Blender",
                            Price = 18000.00m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 10,
                            Category = "Sports",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9069),
                            Description = "Durable mountain bike with 21-speed gear system.",
                            ImageUrl = "https://example.com/images/mountain-bike.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9070),
                            Name = "Mountain Bike",
                            Price = 60000.00m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 11,
                            Category = "Electronics",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9077),
                            Description = "Portable Bluetooth speaker with high-quality sound.",
                            ImageUrl = "https://example.com/images/bluetooth-speaker.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9078),
                            Name = "Bluetooth Speaker",
                            Price = 12000.00m,
                            Stock = 300
                        },
                        new
                        {
                            Id = 12,
                            Category = "Footwear",
                            CreatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9084),
                            Description = "Lightweight and comfortable running shoes.",
                            ImageUrl = "https://example.com/images/running-shoes.jpg",
                            LastUpdatedAt = new DateTime(2024, 6, 19, 19, 46, 21, 568, DateTimeKind.Utc).AddTicks(9085),
                            Name = "Running Shoes",
                            Price = 5000.00m,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infinion.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infinion.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infinion.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infinion.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
